<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BizUnit.MQSeriesSteps</name>
    </assembly>
    <members>
        <!-- Badly formed XML comment ignored for member "T:BizUnit.MQSeriesSteps.MQSeriesGetStep" -->
        <member name="M:BizUnit.MQSeriesSteps.MQSeriesGetStep.Execute(System.Xml.XmlNode,BizUnit.Context)">
            <summary>
            ITestStep.Execute() implementation
            </summary>
            <param name='testConfig'>The Xml fragment containing the configuration for this test step</param>
            <param name='context'>The context for the test, this holds state that is passed beteen tests</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:BizUnit.MQSeriesSteps.MQSeriesClearQueueStep" -->
        <member name="M:BizUnit.MQSeriesSteps.MQSeriesClearQueueStep.Execute(System.Xml.XmlNode,BizUnit.Context)">
            <summary>
            ITestStep.Execute() implementation
            </summary>
            <param name='testConfig'>The Xml fragment containing the configuration for this test step</param>
            <param name='context'>The context for the test, this holds state that is passed beteen tests</param>
        </member>
        <member name="T:BizUnit.MQSeriesSteps.StreamHelper">
            <summary>
            Helper class for stream opperations
            </summary>
        </member>
        <member name="M:BizUnit.MQSeriesSteps.StreamHelper.CompareStreams(System.IO.Stream,System.IO.Stream)">
            <summary>
            Performs a binary comparison between two streams
            </summary>
            <param name="s1">The 1st stream to compare aginst the 2nd</param>
            <param name="s2">The 2nd stream to compare aginst the 1st</param>
        </member>
        <member name="M:BizUnit.MQSeriesSteps.StreamHelper.LoadFileToStream(System.String,System.Double)">
            <summary>
            Helper method to load a disc FILE into a MemoryStream
            </summary>
            <param name="filePath">The path to the FILE containing the data</param>
            <param name="timeout">The timeout afterwhich if the FILE is not found the method will fail</param>
            <returns>MemoryStream containing the data in the FILE</returns>
        </member>
        <member name="M:BizUnit.MQSeriesSteps.StreamHelper.LoadFileToStream(System.String)">
            <summary>
            Helper method to load a disc FILE into a MemoryStream
            </summary>
            <param name="filePath">The path to the FILE containing the data</param>
            <returns>MemoryStream containing the data in the FILE</returns>
        </member>
        <member name="M:BizUnit.MQSeriesSteps.StreamHelper.WriteStreamToConsole(System.String,System.IO.MemoryStream,BizUnit.Context)">
            <summary>
            Helper method to write the data in a stream to the console
            </summary>
            <param name="description">The description text that will be written before the stream data</param>
            <param name="ms">Stream containing the data to write</param>
            <param name="context">The BizUnit context object which holds state and is passed between test steps</param>
        </member>
        <member name="M:BizUnit.MQSeriesSteps.StreamHelper.LoadMemoryStream(System.IO.Stream)">
            <summary>
            Helper method to load a forward only stream into a seekable MemoryStream
            </summary>
            <param name="s">The forward only stream to read the data from</param>
            <returns>MemoryStream containg the data as read from s</returns>
        </member>
        <member name="M:BizUnit.MQSeriesSteps.StreamHelper.LoadMemoryStream(System.String)">
            <summary>
            Helper method to load a string into a MemoryStream
            </summary>
            <param name="s">The string containing the data that will be loaded into the stream</param>
            <returns>MemoryStream containg the data read from the string</returns>
        </member>
        <member name="M:BizUnit.MQSeriesSteps.StreamHelper.CompareXmlDocs(System.IO.Stream,System.IO.Stream,BizUnit.Context)">
            <summary>
            Helper method to compare two Xml documents from streams
            </summary>
            <param name="s1">Stream containing the 1st Xml document</param>
            <param name="s2">Stream containing the 2nd Xml document</param>
            <param name="context">The BizUnit context object which holds state and is passed between test steps</param>
        </member>
        <member name="M:BizUnit.MQSeriesSteps.StreamHelper.EncodeStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Helper method to encode a stream
            </summary>
            <param name="rawData">Stream containing data to be encoded</param>
            <param name="encoding">The encoding to be used for the data</param>
            <returns>Encoded MemoryStream</returns>
        </member>
        <member name="T:BizUnit.MQSeriesHelper">
            <summary>
            Summary description for MQSeriesHelper.
            </summary>
        </member>
        <member name="M:BizUnit.MQSeriesHelper.ReadMessage(System.String,System.String,System.Int32,BizUnit.Context)">
            <summary>
            Helper method to read a message from an MQ Series queue
            </summary>
            
            <param name="queueManagerName">The name of the MQ Series queue manager</param>
            <param name="queueName">The name of the MQ Series queue to read from</param>
            <param name="waitDelay">The time to wait for the message to be read from the queue</param>
            <param name="context">The BizUnit context object which holds state and is passed between test steps</param>
            <returns>String containing the data from the MQ series message</returns>
        </member>
        <member name="M:BizUnit.MQSeriesHelper.ReadMessage(System.String,System.String,System.Int32,BizUnit.Context,System.Byte[]@)">
            <summary>
            Helper method to read a message from an MQ Series queue
            </summary>
            
            <param name="queueManagerName">The name of the MQ Series queue manager</param>
            <param name="queueName">The name of the MQ Series queue to read from</param>
            <param name="waitDelay">The time to wait for the message to be read from the queue</param>
            <param name="context">The BizUnit context object which holds state and is passed between test steps</param>
            <param name="msgID">[out] the MQ Series message ID</param>
            <returns>String containing the data from the MQ series message</returns>
        </member>
        <member name="M:BizUnit.MQSeriesHelper.WriteMessage(System.String,System.String,System.String,BizUnit.Context)">
            <summary>
            Helper method to write a message to an MQ Series queue
            </summary>
            
            <param name="queueManagerName">The name of the MQ Series queue manager</param>
            <param name="queueName">The name of the MQ Series queue to read from</param>
            <param name="message">The MQ Series queue</param>
            <param name="context">The BizUnit context object which holds state and is passed between test steps</param>
        </member>
        <member name="M:BizUnit.MQSeriesHelper.WriteMessage(System.String,System.String,System.String,System.Byte[],BizUnit.Context)">
            <summary>
            Helper method to write a message to an MQ Series queue
            </summary>
            
            <param name="queueManagerName">The name of the MQ Series queue manager</param>
            <param name="queueName">The name of the MQ Series queue to read from</param>
            <param name="message">The MQ Series queue</param>
            <param name="correlId">The correlation ID to be set on the new message</param>
            <param name="context">The BizUnit context object which holds state and is passed between test steps</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:BizUnit.MQSeriesSteps.MQSeriesPutStep" -->
        <member name="M:BizUnit.MQSeriesSteps.MQSeriesPutStep.Execute(System.Xml.XmlNode,BizUnit.Context)">
            <summary>
            ITestStep.Execute() implementation
            </summary>
            <param name='testConfig'>The Xml fragment containing the configuration for this test step</param>
            <param name='context'>The context for the test, this holds state that is passed beteen tests</param>
        </member>
    </members>
</doc>
