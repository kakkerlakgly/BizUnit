<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BizUnit</name>
    </assembly>
    <members>
        <member name="T:BizUnit.BizUnit">
             <summary>
             BizUnit test framework for the rapid development of automated test cases.
             </summary>
             
             <remarks>
             The following example demonstrates how to create and call BizUnit:
             
             <code escaped="true">
             namespace WoodgroveBank.BVTs
            	{
                 using System;
                 using NUnit.Framework;
                 using BizUnit;
            
                 // This is an example of calling BizUnit from NUnit...
                 [TestFixture]
                 public class SmokeTests
                 {
                     [Test]
                     public void Test_01_Adapter_MSMQ()
                     {
                         BizUnit bizUnit = new BizUnit(@".\TestCases\Test_01_Adapter_MSMQ.xml");
                         bizUnit.RunTest();
                     }
                 }
             }		
            	</code>
            	
            	<para>
            	Test cases are defined with three stages:
            	<para>1. TestSetup - used to setup the conditions ready to execute the test</para>
            	<para>2. TestExecution - the main execution stage of the test</para>
            	<para>3: TestCleanup - the final stage is always executed regardless of whether the test passes 
            	or fails in order to leave the system in the state prior to executing the test</para>
            	</para>
            	
            	<para>
            	The following illustrates the structure of a test case:
             <code escaped="true">
            	<TestCase _testName="FILE_Test_01">
            	
            		<TestSetup>
            			<TestStep assemblyPath="" typeName="BizUnit.ExecuteCommandStep">
                         ...
            			</TestStep>
            		</TestSetup>
            		
            		<TestExecution>
            			<TestStep assemblyPath="" typeName="BizUnit.HttpRequestResponseStep" runConcurrently="true">
                         ...
            			</TestStep>
            				
            			<TestStep assemblyPath="" typeName="BizUnit.FileValidateStep">
                         ...
            			</TestStep>
            					
            		</TestExecution>
            		
            		<!-- Test cleanup: test cases should always leave the system in the state they found it -->
            		<TestCleanup>
            			<TestStep assemblyPath="" typeName="BizUnit.FileDeleteStep">
                         ...
            			</TestStep>
            		</TestCleanup>	
            	
            	</TestCase>
            	</code>
            	
            	<list type="table">
            		<listheader>
            			<term>Tag</term>
            			<description>Description</description>
            		</listheader>
            		<item>
            			<term>TestCase/_testName</term>
            			<description>The name of the test case being executed</description>
            		</item>
            		<item>
            			<term>TestSetup</term>
            			<description>The setup stage of the test case, containing zero or more test steps</description>
            		</item>
            		<item>
            			<term>TestExecution</term>
            			<description>The execution stage of the test case, containing zero or more test steps</description>
            		</item>
            		<item>
            			<term>TestExecution/runConcurrently</term>
            			<description>If runConcurrently is set to true the test step will be executed concurrently, meaning that 
            			subsequent test steps will be started immediately after this test step has started. BizUnit will 
            			wait for all of the outstanding test steps executing in concurrent mode before running the TestCleanup 
            			stage.</description>
            		</item>
            		<item>
            			<term>TestCleanup</term>
            			<description>The clenaup stage should return the system to the state prior to executing the test, for
            			example, if messages were written to various MSMQ queue's, the TestCleanup stage should ensure that
            			all of those queues are empty.</description>
            		</item>
            	</list>
            	</para>
             <para>
             Wild cards contained in configuration will be replaced if the test steps extract the configuration using the 
             _context helper class.
             E.g. For the test step configuration below:
             <code escaped="true">
             <TestStep assemblyPath="" typeName="BizUnit.FileCreateStep">
                 <SourcePath>..\..\..\TestData\InDoc1.xml</SourcePath>
                 <CreationPath>..\..\..\Rec_03\TransactionId_%Guid%_%ServerName%.xml</CreationPath>
            	</TestStep>
             </code>
             CreationPath becomes "..\..\..\Rec_03\TransactionId_12345678-D6AB-4aa9-A772-938972E3FD51_ZEUS001.xml"
             </para>
             </remarks>
        </member>
        <member name="M:BizUnit.BizUnit.#ctor(System.String)">
             <summary>
             BizUnit constructor.
             </summary>
             <param name="configFile">The path of the test case file, maybe a relavtive path.</param>
             
             <remarks>
             The following example demonstrates how to create and call BizUnit:
             
             <code escaped="true">
            	namespace WoodgroveBank.BVTs
            	{
            	using System;
            	using NUnit.Framework;
            	using BizUnit;
            
             // This is an example of calling BizUnit from NUnit...
            	[TestFixture]
            	public class SmokeTests
            	{
            		[Test]
            		public void Test_01_Adapter_MSMQ()
            		{
            			BizUnit bizUnit = new BizUnit(@".\TestCases\Test_01_Adapter_MSMQ.xml");
            			bizUnit.RunTest();
            		}
            	}		
            	</code>
            	
            	</remarks>
        </member>
        <member name="M:BizUnit.BizUnit.#ctor(System.String,BizUnit.Context)">
             <summary>
             BizUnit constructor.
             </summary>
             <param name="configFile">The path of the test case file, maybe a relavtive path.</param>
             <param name="ctx">The BizUnit _context object may be flowed from an previous test case.</param>
             
             <remarks>
             The following example demonstrates how to create and call BizUnit. 
             Note: the BizUnit _context object may be created and passed into
             BizUnit, any _context properties set on the _context object may be
             used by BizUnit steps. Context properties may be of any type, i.e. any 
             .Net type, of course the consumer of that _context object will need to know
             what type to expect. 
             Also note that many test steps have the ability to fetch their configuration 
             from the BizUnit _context if their configuration is decorated with the 
             attribute takeFromCtx.
             
             <code escaped="true">
            	namespace WoodgroveBank.BVTs
            	{
            	using System;
            	using NUnit.Framework;
            	using BizUnit;
            
             // This is an example of calling BizUnit from NUnit...
            	[TestFixture]
            	public class SmokeTests
            	{
                 AddressBook addressBook = new AddressBook("Redmond");
             
                 Context ctx = new Context();
                 ctx.Add("CorrelationId", "1110023");
                 ctx.Add("SomeStateToFlow", "Joe.Blogs@thunderbolt.com");
                 ctx.Add("AddressBook", addressBook);
             
            		[Test]
            		public void Test_02_Adapter_MSMQ()
            		{
            			BizUnit bizUnit = new BizUnit(@".\TestCases\Test_01_Adapter_MSMQ.xml", ctx);
            			bizUnit.RunTest();
            		}
            	}		
            	</code>
            	
            	</remarks>
        </member>
        <member name="M:BizUnit.BizUnit.#ctor(System.IO.Stream)">
             <summary>
             BizUnit constructor.
             </summary>
             <param name="configStream">The path of the test case file, maybe a relavtive path.</param>
             
             <remarks>
             The following example demonstrates how to create and call BizUnit:
             
             <code escaped="true">
            	namespace WoodgroveBank.BVTs
            	{
            	using System;
            	using NUnit.Framework;
            	using BizUnit;
            
             // This is an example of calling BizUnit from NUnit...
            	[TestFixture]
            	public class SmokeTests
            	{
            		[Test]
            		public void Test_03_Adapter_MSMQ()
            		{
                     // The test case is an embeded resource...
            			BizUnit bizUnit = new BizUnit(Assembly.GetExecutingAssembly().GetManifestResourceStream("BizUnit.SampleTests.BizUnitFunctionalTests.Test_04_MQSeriesTest.xml"));
            			bizUnit.RunTest();
            		}
            	}		
            	</code>
            	
            	</remarks>
        </member>
        <member name="M:BizUnit.BizUnit.#ctor(BizUnit.BizUnitOM.BizUnitTestCase)">
             <summary>
             BizUnit constructor.
             </summary>
             <param name="testCase">The BizUnit test case object model that has been built to represent the test to be executed.</param>
             
             <remarks>
             The following example demonstrates how to create and call BizUnit using 
             the BizUnit Test Case Object Model:
             
             <code escaped="true">
            	namespace WoodgroveBank.BVTs
            	{
            	using System;
            	using NUnit.Framework;
            	using BizUnit;
            
            	[TestMethod]
            	public class SmokeTests
            	{
            		[Test]
            		public void Test_03_Adapter_MSMQ()
            		{
                     // The test case is an embeded resource...
                     BizUnitTestCase testCase = new BizUnitTestCase();
            
                     FileCreateStep fcs = new FileCreateStep();
                     fcs.SourcePath = @"C:\Tests\BizUnit.Tests\Data\PO_MSFT001.xml";
                     fcs.CreationPath = @"C:\Tests\BizUnit.Tests\Data\PO_MSFT001_%Guid%.xml";
                     testCase.AddTestStep(fcs, TestStage.Execution);
            
                     BizUnit bizUnit = new BizUnit(testCase);
                     bizUnit.RunTest();
            		}
            	}		
            	</code>
            	
            	</remarks>
        </member>
        <member name="M:BizUnit.BizUnit.#ctor(BizUnit.BizUnitOM.BizUnitTestCase,BizUnit.Context)">
             <summary>
             BizUnit constructor.
             </summary>
             <param name="testCase">The BizUnit test case object model that has been built to represent the test to be executed.</param>
             <param name="ctx">The BizUnit _context object may be flowed from an previous test case.</param>
             
             <remarks>
             The following example demonstrates how to create and call BizUnit using 
             the BizUnit Test Case Object Model:
             
             <code escaped="true">
            	namespace WoodgroveBank.BVTs
            	{
            	using System;
            	using NUnit.Framework;
            	using BizUnit;
            
            	[TestMethod]
            	public class SmokeTests
            	{
            		[Test]
            		public void Test_03_Adapter_MSMQ()
            		{
                     // The test case is an embeded resource...
                     BizUnitTestCase testCase = new BizUnitTestCase();
            
                     Context ctx = new Context();
                     ctx.Add("PathToWriteFileTo", testDirectory + @"\Data_%Guid%.xml");
             
                     FileCreateStep fcs = new FileCreateStep();
                     fcs.SourcePath = @"C:\Tests\BizUnit.Tests\Data\PO_MSFT001.xml";
                     fcs.CreationPath = "takeFromCtx:PathToWriteFileTo";
                     testCase.AddTestStep(fcs, TestStage.Execution);
            
                     BizUnit bizUnit = new BizUnit(testCase, ctx);
                     bizUnit.RunTest();
            		}
            	}		
            	</code>
            	
            	</remarks>
        </member>
        <member name="M:BizUnit.BizUnit.#ctor(System.IO.Stream,BizUnit.Context)">
             <summary>
             BizUnit constructor.
             </summary>
             <param name="configStream">The path of the test case file, maybe a relavtive path.</param>
             <param name="ctx">The BizUnit _context object may be flowed from an previous test case.</param>
             
             <remarks>
             The following example demonstrates how to create and call BizUnit. 
             Note: the BizUnit _context object may be created and passed into
             BizUnit, any _context properties set on the _context object may be
             used by BizUnit steps. Context properties may be of any type, i.e. any 
             .Net type, of course the consumer of that _context object will need to know
             what type to expect. 
             Also note that many test steps have the ability to fetch their configuration 
             from the BizUnit _context if their configuration is decorated with the 
             attribute takeFromCtx.
             
             <code escaped="true">
            	namespace WoodgroveBank.BVTs
            	{
            	using System;
            	using NUnit.Framework;
            	using BizUnit;
            
             // This is an example of calling BizUnit from NUnit...
            	[TestFixture]
            	public class SmokeTests
            	{
                 AddressBook addressBook = new AddressBook("Redmond");
             
                 Context ctx = new Context();
                 ctx.Add("CorrelationId", "1110023");
                 ctx.Add("SomeStateToFlow", "Joe.Blogs@thunderbolt.com");
                 ctx.Add("AddressBook", addressBook);
             
            		[Test]
            		public void Test_04_Adapter_MSMQ()
            		{
                     // The test case is an embeded resource...
            			BizUnit bizUnit = new BizUnit(Assembly.GetExecutingAssembly().GetManifestResourceStream("BizUnit.SampleTests.BizUnitFunctionalTests.Test_04_MQSeriesTest.xml"), ctx);
            			bizUnit.RunTest();
            		}
            	}		
            	</code>
            	
            	</remarks>
        </member>
        <member name="M:BizUnit.BizUnit.#ctor(System.String,TestGroupPhase)">
             <summary>
             BizUnit constructor for the setup and teardown of a test group.
             </summary>
             <param name="configFile">The path of the test case file, maybe a relavtive path.</param>
             <param name="testGroupPhase">The test group phase (TestGroupPhase.TestGroupSetup|TestGroupPhase.TestGroupTearDown). This 
             constructor is used during the initialization or termination of a group of test cases, for example when using the NUnit attributes: [TestFixtureSetUp] or [TestFixtureTearDown].</param>
             
             <remarks>
             The following example demonstrates how to create and call BizUnit:
             
             <code escaped="true">
            	namespace WoodgroveBank.BVTs
            	{
            	using System;
            	using NUnit.Framework;
            	using BizUnit;
            
             // This is an example of calling BizUnit from NUnit...
            	[TestFixture]
            	public class SmokeTests
            	{
            		[TestFixtureSetUp]
            		public void Test_Group_Setup()
            		{
            			BizUnit bizUnit = new BizUnit(@".\TestCases\Test_Group_Setup.xml", BizUnit.TestGroupPhase.TestGroupSetup);
            			bizUnit.RunTest();
            		}
            		
            		...
            		
            	}		
            	</code>
            	
            	</remarks>
        </member>
        <member name="M:BizUnit.BizUnit.#ctor(System.String,TestGroupPhase,BizUnit.Context)">
            <summary>
            BizUnit constructor for the setup and teardown of a test group.
            </summary>
            <param name="configFile">The path of the test case file, maybe a relavtive path.</param>
            <param name="testGroupPhase">The test group phase (TestGroupPhase.TestGroupSetup|TestGroupPhase.TestGroupTearDown). This 
            constructor is used during the initialization or termination of a group of test cases, for example when using the NUnit attributes: [TestFixtureSetUp] or [TestFixtureTearDown].</param>
            <param name="ctx">The BizUnit _context object may be flowed from an previous test case.</param>
            
            <remarks>
            The following example demonstrates how to create and call BizUnit. 
            Note: the BizUnit _context object may be created and passed into
            BizUnit, any _context properties set on the _context object may be
            used by BizUnit steps. Context properties may be of any type, i.e. any 
            .Net type, of course the consumer of that _context object will need to know
            what type to expect. 
            Also note that many test steps have the ability to fetch their configuration 
            from the BizUnit _context if their configuration is decorated with the 
            attribute takeFromCtx.
            
            <code escaped="true">
            namespace WoodgroveBank.BVTs
            {
            using System;
            using NUnit.Framework;
            using BizUnit;
            
            // This is an example of calling BizUnit from NUnit...
            [TestFixture]
            public class SmokeTests
            {
                AddressBook addressBook = new AddressBook("Redmond");
            
                Context ctx = new Context();
                ctx.Add("CorrelationId", "1110023");
                ctx.Add("SomeStateToFlow", "Joe.Blogs@thunderbolt.com");
                ctx.Add("AddressBook", addressBook);
            
            	[TestFixtureSetUp]
            	public void Test_Group_Setup()
            	{
            		BizUnit bizUnit = new BizUnit(@".\TestCases\Test_Group_Setup.xml", BizUnit.TestGroupPhase.TestGroupSetup, ctx);
            		bizUnit.RunTest();
            	}
            	
            	...
            	
            }		
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.BizUnit.#ctor(System.IO.Stream,TestGroupPhase)">
             <summary>
             BizUnit constructor for the setup and teardown of a test group.
             </summary>
             <param name="configStream">The path of the test case file, maybe a relavtive path.</param>
             <param name="testGroupPhase">The test group phase (TestGroupPhase.TestGroupSetup|TestGroupPhase.TestGroupTearDown). This 
             constructor is used during the initialization or termination of a group of test cases, for example when using the NUnit attributes: [TestFixtureSetUp] or [TestFixtureTearDown].</param>
             
             <remarks>
             The following example demonstrates how to create and call BizUnit:
             
             <code escaped="true">
            	namespace WoodgroveBank.BVTs
            	{
            	using System;
            	using NUnit.Framework;
            	using BizUnit;
            
             // This is an example of calling BizUnit from NUnit...
            	[TestFixture]
            	public class SmokeTests
            	{
            		[TestFixtureSetUp]
            		public void Test_Group_Setup()
            		{
                     // The test case is an embeded resource...
            			BizUnit bizUnit = new BizUnit(@".\TestCases\Test_Group_Setup.xml", BizUnit.TestGroupPhase.TestGroupSetup);
            			bizUnit.RunTest();
            		}
            		
            		...
            		
            	}		
            	</code>
            	
            	</remarks>
        </member>
        <member name="M:BizUnit.BizUnit.#ctor(System.IO.Stream,TestGroupPhase,BizUnit.Context)">
             <summary>
             BizUnit constructor for the setup and teardown of a test group.
             </summary>
             <param name="configStream">The path of the test case file, maybe a relavtive path.</param>
             <param name="testGroupPhase">The test group phase (TestGroupPhase.TestGroupSetup|TestGroupPhase.TestGroupTearDown). This 
             constructor is used during the initialization or termination of a group of test cases, for example when using the NUnit attributes: [TestFixtureSetUp] or [TestFixtureTearDown].</param>
             <param name="ctx">The BizUnit _context object may be flowed from an previous test case.</param>
             
             <remarks>
             The following example demonstrates how to create and call BizUnit. 
             Note: the BizUnit _context object may be created and passed into
             BizUnit, any _context properties set on the _context object may be
             used by BizUnit steps. Context properties may be of any type, i.e. any 
             .Net type, of course the consumer of that _context object will need to know
             what type to expect. 
             Also note that many test steps have the ability to fetch their configuration 
             from the BizUnit _context if their configuration is decorated with the 
             attribute takeFromCtx.
             
             <code escaped="true">
            	namespace WoodgroveBank.BVTs
            	{
            	using System;
            	using NUnit.Framework;
            	using BizUnit;
            
             // This is an example of calling BizUnit from NUnit...
            	[TestFixture]
            	public class SmokeTests
            	{
                 AddressBook addressBook = new AddressBook("Redmond");
             
                 Context ctx = new Context();
                 ctx.Add("CorrelationId", "1110023");
                 ctx.Add("SomeStateToFlow", "Joe.Blogs@thunderbolt.com");
                 ctx.Add("AddressBook", addressBook);
             
            		[TestFixtureSetUp]
            		public void Test_Group_Setup()
            		{
                     // The test case is an embeded resource...
            			BizUnit bizUnit = new BizUnit(@".\TestCases\Test_Group_Setup.xml", BizUnit.TestGroupPhase.TestGroupSetup, ctx);
            			bizUnit.RunTest();
            		}
            		
            		...
            		
            	}		
            	</code>
            	
            	</remarks>
        </member>
        <member name="M:BizUnit.BizUnit.RunTest">
             <summary>
             Executes a test case.
             </summary>
             <returns>Returns void</returns>
             
             <remarks>
             The following example demonstrates how to create and call BizUnit:
             
             <code escaped="true">
            	namespace WoodgroveBank.BVTs
            	{
            	using System;
            	using NUnit.Framework;
            	using BizUnit;
            
             // This is an example of calling BizUnit from NUnit...
            	[TestFixture]
            	public class SmokeTests
            	{
            		[Test]
            		public void Test_01_Adapter_MSMQ()
            		{
            			BizUnit bizUnit = new BizUnit(@".\TestCases\Test_01_Adapter_MSMQ.xml");
            			bizUnit.RunTest();
            		}
            	}		
            	</code>
            	
            	</remarks>
        </member>
        <member name="P:BizUnit.BizUnit.Ctx">
             <summary>
             Gets the BizUnit _context for the current test.
             </summary>
             
             <remarks>
             The following example demonstrates how to create and call BizUnit:
             
             <code escaped="true">
            	namespace WoodgroveBank.BVTs
            	{
            	using System;
            	using NUnit.Framework;
            	using BizUnit;
            
             // This is an example of calling BizUnit from NUnit...
            	[TestFixture]
            	public class SmokeTests
            	{
                 Context ctx;
             
            		[TestFixtureSetUp]
            		public void Test_Group_Setup()
            		{
                     // The test case is an embeded resource...
            			BizUnit bizUnit = new BizUnit(@".\TestCases\Test_Group_Setup.xml", BizUnit.TestGroupPhase.TestGroupSetup);
                     ctx = bizUnit.Ctx;
             
            			bizUnit.RunTest();
            		}
            		
            		...
            		
            	}		
            	</code>
            	
            	</remarks>
        </member>
        <member name="T:BizUnit.BizUnitOM.BizUnitParameterFormatterAttribute">
             <summary>
             The BizUnitParameterFormatterAttribute Attribute is used to decorate 
             test step properties to specify a custom formatter to use when setting 
             a specific property.
             </summary>
             
             <remarks>
             The following example demonstrates how to use the BizUnitParameterFormatterAttribute:
             
             <code escaped="true">
             	public class DBExecuteNonQueryStep : ITestStepOM
             	{
             	    private SqlQuery sqlQuery;
                     ...
             
                     // Instruct BizUnit to use the type: BizUnit.SqlQueryParamFormatter 
                     // to format the object array when setting this property. Note, 
                     // BizUnit.SqlQueryParamFormatter should implement ITestStepParameterFormatter
                     [BizUnitParameterFormatter("BizUnit.SqlQueryParamFormatter")]
             	    public SqlQuery SQLQuery
             	    {
             	        set { this.sqlQuery = value; }
                         get { return this.sqlQuery; }
             	    }
             
                     ...
                 }
            
            	</code>
            	
            	</remarks>
        </member>
        <member name="T:BizUnit.BizUnitOM.BizUnitTestCase">
            <summary>
            The BizUnitTestCase represents a BizUnit Test Case when using the object model.
            The BizUnitTestCase is created and test steps are added to it, this is done either 
            by directly creating the test steps, or by creating TestStepBuilder and add it to 
            the BizUnitTestCase. Using a TestStepBuilder means that the creation of the test 
            step is delegated to the TestStepBuilder.
            Once the BizUnitTestCase has been constructed, it may be passed to BizUnit 
            and directly executed.
            </summary>
            
            <remarks>
            The following example demonstrates how to use the BizUnitTestCase:
            
            <code escaped="true">
            // Create the TestStepBuilder
            TestStepBuilder tsb = new TestStepBuilder("BizUnit.FileCreateStep");
            
            // Set the properties on the test step...
            object[] args = new object[1];
            args[0] = @"..\..\..\Test\BizUnit.Tests\Data\LoadGenScript001.xml";
            tsb.SetProperty("SourcePath", args);
            
            args = new object[1];
            args[0] = @"..\..\..\Test\BizUnit.Tests\Out\Data_%Guid%.xml";
            tsb.SetProperty("CreationPath", args);
            
            // Create the BizUnitTestCase
            BizUnitTestCase testCase = new BizUnitTestCase();
            
            // Add the test step builder to the BizUnitTestCase...
            testCase.AddTestStep(tsb, TestStage.Execution);
            
            // Create and execute an instance of BizUnit...
            BizUnit bizUnit = new BizUnit(testCase);
            bizUnit.RunTest();
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.BizUnitOM.BizUnitTestCase.#ctor(System.String)">
            <summary>
            Constructor for BizUnitTestCase
            </summary>
            
            <param name='name'>The name of the test case</param>
        </member>
        <member name="M:BizUnit.BizUnitOM.BizUnitTestCase.AddTestStep(BizUnit.BizUnitOM.TestStepBuilder,TestStage)">
            <summary>
            Used to add a test step to a test case at a specific stage of the test.
            </summary>
            
            <param name='testStep'>The test step to add to the test case, 
            creation of the test step is delegated to the TestStepBuilder</param>
            <param name='stage'>The stage of the test case in which to add the test step</param>
        </member>
        <member name="M:BizUnit.BizUnitOM.BizUnitTestCase.AddTestStep(BizUnit.BizUnitOM.TestStepBuilder,TestStage,System.Boolean,System.Boolean)">
            <summary>
            Used to add a test step to a test case at a specific stage of the test.
            </summary>
            
            <param name='testStep'>The test step to add to the test case, 
            creation of the test step is delegated to the TestStepBuilder</param>
            <param name='stage'>The stage of the test case in which to add the test step</param>
            <param name='runConcurrently'>Specifies whether the test step 
            should run concurrently to other test steps. Defaults to false if not specified.</param>
            <param name='failOnError'>Specifies whether the entire test case 
            should fail if this individual test step fails, defaults to true if not specified.</param>
        </member>
        <member name="M:BizUnit.BizUnitOM.BizUnitTestCase.AddTestStep(BizUnit.ITestStep,System.String,TestStage)">
            <summary>
            Used to add a test step to a test case at a specific stage of the test.
            </summary>
            
            <param name='testStep'>The test step to add to the test case.</param>
            <param name='config'>The configuration for the test step to be used when it is executed.</param>
            <param name='stage'>The stage of the test case in which to add the test step</param>
        </member>
        <member name="M:BizUnit.BizUnitOM.BizUnitTestCase.AddTestStep(BizUnit.ITestStep,System.String,TestStage,System.Boolean,System.Boolean)">
            <summary>
            Used to add a test step to a test case at a specific stage of the test.
            </summary>
            
            <param name='testStep'>The test step to add to the test case.</param>
            <param name='config'>The configuration for the test step to be used when it is executed.</param>
            <param name='stage'>The stage of the test case in which to add the test step</param>
            <param name='runConcurrently'>Specifies whether the test step 
            should run concurrently to other test steps. Defaults to false if not specified.</param>
            <param name='failOnError'>Specifies whether the entire test case 
            should fail if this individual test step fails, defaults to true if not specified.</param>
        </member>
        <member name="M:BizUnit.BizUnitOM.BizUnitTestCase.AddTestStep(BizUnit.BizUnitOM.ITestStepOM,TestStage)">
            <summary>
            Used to add a test step to a test case at a specific stage of the test.
            </summary>
            
            <param name='testStep'>The test step to add to the test case.</param>
            <param name='stage'>The stage of the test case in which to add the test step</param>
        </member>
        <member name="M:BizUnit.BizUnitOM.BizUnitTestCase.AddTestStep(BizUnit.BizUnitOM.ITestStepOM,TestStage,System.Boolean,System.Boolean)">
            <summary>
            Used to add a test step to a test case at a specific stage of the test.
            </summary>
            
            <param name='testStep'>The test step to add to the test case.</param>
            <param name='stage'>The stage of the test case in which to add the test step</param>
            <param name='runConcurrently'>Specifies whether the test step 
            should run concurrently to other test steps. Defaults to false if not specified.</param>
            <param name='failOnError'>Specifies whether the entire test case 
            should fail if this individual test step fails, defaults to true if not specified.</param>
        </member>
        <member name="P:BizUnit.BizUnitOM.BizUnitTestCase.Name">
            <summary>
            Gets and sets the name of the test case
            </summary>
            <value>The name of the test case.</value>
        </member>
        <member name="P:BizUnit.BizUnitOM.BizUnitTestCase.SetupSteps">
            <summary>
            Gets the test setup steps.
            </summary>
            <value>The test setup steps.</value>
        </member>
        <member name="P:BizUnit.BizUnitOM.BizUnitTestCase.ExecutionSteps">
            <summary>
            Gets the test execution steps.
            </summary>
            <value>The test execution steps.</value>
        </member>
        <member name="P:BizUnit.BizUnitOM.BizUnitTestCase.CleanupSteps">
            <summary>
            Gets the test cleanup steps.
            </summary>
            <value>The test cleanup steps.</value>
        </member>
        <member name="T:BizUnit.StepValidationException">
            <summary>
            TestStepExecutionException is thrown by BizUnit to indicate a validation step failed.
            </summary>
            <remarks>The ValidationStepExecutionException is thrown by BizUnit when a validation step fails, the 
            framework automatically wraps the exception thrown by the validaiton step with an 
            TestStepExecutionException</remarks>
        </member>
        <member name="M:BizUnit.StepValidationException.#ctor(System.String,BizUnit.Xaml.TestStepBase)">
            <summary>
            TestStepExecutionException constructor.
            </summary>
            <param name="message">The message associated with this exception.</param>
            <param name="testStep">The name of the BizUnit test step being validated.</param>
        </member>
        <member name="P:BizUnit.StepValidationException.TestStepName">
            <summary>
            The name of the test step
            </summary>
        </member>
        <member name="T:BizUnit.BizUnitOM.BizUnitTestStepWrapper">
            <summary>
            BizUnitTestStepWrapper wraps BizUnit test steps and provides access to any exceptions raised at runtime.
            </summary>
        </member>
        <member name="P:BizUnit.BizUnitOM.BizUnitTestStepWrapper.ExecuteException">
            <summary>
            Returns the exception generated during execution, otherwise null.
            </summary>
            <value>The exception which occured during execution.</value>
        </member>
        <member name="M:BizUnit.Xaml.ValidationStepBase.ExecuteValidation(System.IO.Stream,BizUnit.Context)">
            <summary>
            Called by the BizUnit framework to execute the validation test step
            </summary>
            
            <param name='data'>The stream cintaining the data to be validated.</param>
            <param name='context'>The context for the test, this holds state that is passed beteen tests</param>
        </member>
        <member name="M:BizUnit.Xaml.ValidationStepBase.Validate(BizUnit.Context)">
            <summary>
            Called by the BizUnit framework to validate that the validation step has been correctly configured
            </summary>
        </member>
        <member name="T:BizUnit.ConcurrentTestStepWrapper">
            <summary>
            Summary description for ConcurrentTestStepWrapper.
            </summary>
        </member>
        <member name="T:BizUnit.Context">
            <summary>
            Represents a state object that is passed between BizUnit test steps.
            </summary>
            
            <remarks>
            The context is passed by BizUnit to each individual test step, state maybe written to or read from the context, note the following
            wild cards are supported: %DateTime%, %DateTimeISO8601%, %ServerName% and %Guid%.
            The context also provides helper methods for test steps to read their configuration, and to log information, warnings, errors 
            and data in a consistent manner.
            The context contains some standard information on the current test executing, such as BizUnitTestCaseName which contains the 
            name of the current test case being executed and BizUnitTestCaseStartTime which contains the time the current test case started.
            </remarks>
        </member>
        <member name="M:BizUnit.Context.#ctor">
            <summary>
            Default Context constructor.
            </summary>
            
            <remarks>
            This may be used for scenarios where by the context object needs 
            to be created and passed to BizUnit.
            </remarks>
        </member>
        <member name="M:BizUnit.Context.Add(System.String,System.Object)">
            <summary>
            Adds a new object to the context.
            </summary>
            <param name="key">The name of the key for the object added.</param>
            <param name="newValue">The object to be added to the context.</param>
            
            <remarks>
            The following example demonstrates how to add a new item to the context:
            
            <code escaped="true">
            context.Add("FILE_NAME", fileName);
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.Context.Add(System.String,System.Object,System.Boolean)">
            <summary>
            Adds a new object to the context.
            </summary>
            <param name="key">The name of the key for the object added.</param>
            <param name="newValue">The object to be added to the context.</param>
            <param name="updateIfExists">If the object already exists and this flag 
            is set to true, its value will be updated, otherwise the method will 
            throw an exception.</param>
            
            <remarks>
            The following example demonstrates how to add a new item to the context:
            
            <code escaped="true">
            context.Add("FILE_NAME", fileName);
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.Context.Remove(System.String)">
            <summary>
            Removes an object from the context.
            </summary>
            <param name="key">The name of the key for the object to remove.</param>
            
            <remarks>
            The following example demonstrates how to remove an item from the context:
            
            <code escaped="true">
            context.Remove("FILE_NAME");
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.Context.GetValue(System.String)">
            <summary>
            Gets a string previously saved on the context.
            </summary>
            <param name="key">The name of the key for the object to get.</param>
            <returns>string value</returns>
            
            <remarks>
            The following example demonstrates how to get a string value from the context:
            
            <code escaped="true">
            string fileName = context.GetValue("FILE_NAME");
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.Context.GetObject(System.String)">
            <summary>
            Gets an object previously saved to the context .
            </summary>
            <param name="key">The name of the key for the object to get.</param>
            <returns>object</returns>
            
            <remarks>
            The following example demonstrates how to get an object from the context:
            
            <code escaped="true">
            object fileName = context.GetObject("FILE_NAME");
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.Context.ExecuteValidator(System.IO.Stream,BizUnit.BizUnitOM.IValidationStepOM)">
            <summary>
            Executes a validation test step.
            </summary>
            <param name="data">The stream containing the data to validate.</param>
            <param name="validationStep">The IValidationStepOM to be used for the validation test step.</param>
        </member>
        <member name="M:BizUnit.Context.ExecuteValidator(System.IO.Stream,System.Xml.XmlNode)">
            <summary>
            Executes a validation test step.
            </summary>
            <param name="data">The stream containing the data to validate.</param>
            <param name="validatorConfig">The Xml configuration for the validation test step, this configuration is passed onto the validation step by BizUnit.</param>
            
            <remarks>
            The following example demonstrates how to execute a validation test step:
            
            <code escaped="true">
            XmlNode validationConfig = testConfig.SelectSingleNode("ValidationStep");
            
            ...
            
            MemoryStream response = HttpHelper.SendRequestData(destinationUrl, data, requestTimeout, context);
            context.ExecuteValidator( response, validationConfig );
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.Context.ExecuteValidator(System.IO.Stream,BizUnit.BizUnitOM.IValidationStepOM,System.Boolean)">
            <summary>
            Executes a validation test step, with the option to seek the data stream to the beginning
            </summary>
            <param name="data">The stream containing the data to validate.</param>
            <param name="validationStep">The IValidationStepOM to be used for the validation test step (optional).</param>
            <param name="seekStream">True if the stream should be seeked to the begining.</param>
        </member>
        <member name="M:BizUnit.Context.ExecuteValidator(System.IO.Stream,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Executes a validation test step, with the option to seek the data stream to the beginning
            </summary>
            <param name="data">The stream containing the data to validate.</param>
            <param name="validatorConfig">The Xml configuration for the validation test step, this configuration is passed onto the validation step by BizUnit.</param>
            <param name="seekStream">True if the stream should be seeked to the begining.</param>
            
            <remarks>
            The following example demonstrates how to execute a validation test step:
            
            <code escaped="true">
            XmlNode validationConfig = testConfig.SelectSingleNode("ValidationStep");
            
            ...
            
            MemoryStream response = HttpHelper.SendRequestData(destinationUrl, data, requestTimeout, context);
            context.ExecuteValidator( response, validationConfig, true );
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.Context.ExecuteValidator(System.IO.Stream,System.Xml.XmlNode,BizUnit.BizUnitOM.IValidationStepOM)">
            <summary>
            Executes a validation test step, either the Xml configuration for the step or the BizUnit OM maybe supplied, but not both.
            </summary>
            <param name="data">The stream containing the data to validate.</param>
            <param name="validatorConfig">The Xml configuration for the validation test step, this configuration is passed onto the validation step by BizUnit (optional).</param>
            <param name="validationStep">The validation step implementing IValidationStepOM to execute (optional).</param>
        </member>
        <member name="M:BizUnit.Context.ExecuteValidator(System.IO.Stream,System.Xml.XmlNode,BizUnit.BizUnitOM.IValidationStepOM,System.Boolean)">
            <summary>
            Executes a validation test step, either the Xml configuration for the step or the BizUnit OM maybe supplied, but not both.
            </summary>
            <param name="data">The stream containing the data to validate.</param>
            <param name="validatorConfig">The Xml configuration for the validation test step, this configuration is passed onto the validation step by BizUnit (optional).</param>
            <param name="validationStep">The validation step implementing IValidationStepOM to execute (optional).</param>
            <param name="seekStream">True if the stream should be seeked to the begining.</param>
        </member>
        <member name="M:BizUnit.Context.ExecuteContextLoader(System.IO.Stream,System.Xml.XmlNode)">
            <summary>
            Executes a context loader test step.
            </summary>
            <param name="data">The stream containing the data to validate.</param>
            <param name="contextConfig">The Xml configuration for the context loader 
            test step, this configuration is passed onto the validation step by BizUnit (optional).</param>
            
            <remarks>
            Context loader steps load data onto the context. The following example demonstrates how to execute a validation test step:
            
            <code escaped="true">
            XmlNode contextConfig = testConfig.SelectSingleNode("ContextConfig");
            
            ...
            
            MemoryStream response = HttpHelper.SendRequestData(destinationUrl, data, requestTimeout, context);
            context.ExecuteContextLoader( response, contextConfig );
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.Context.ExecuteContextLoader(System.IO.Stream,System.Xml.XmlNode,BizUnit.BizUnitOM.IContextLoaderStepOM)">
            <summary>
            Executes a validation test step, either the Xml configuration for the step or the BizUnit OM maybe supplied, but not both.
            </summary>
            <param name="data">The stream containing the data to validate.</param>
            <param name="contextConfig">The Xml configuration for the context loader step, this configuration is passed onto the context loader step by BizUnit (optional).</param>
            <param name="contextLoaderStep">The context loader step implementing IContextLoaderStepOM to execute (optional).</param>
        </member>
        <member name="M:BizUnit.Context.ExecuteContextLoader(System.IO.Stream,System.Xml.XmlNode,BizUnit.BizUnitOM.IContextLoaderStepOM,System.Boolean)">
            <summary>
            Executes a validation test step, either the Xml configuration for the step or the BizUnit OM maybe supplied, but not both.
            </summary>
            <param name="data">The stream containing the data to validate.</param>
            <param name="contextConfig">The Xml configuration for the context loader step, this configuration is passed onto the context loader step by BizUnit (optional).</param>
            <param name="contextLoaderStep">The context loader step implementing IContextLoaderStepOM to execute (optional).</param>
            <param name="seekStream">True if the stream should be seeked to the begining.</param>
        </member>
        <member name="M:BizUnit.Context.ExecuteContextLoader(System.IO.Stream,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Executes a context loader test step, , with the option to seek the data stream to the beginning.
            </summary>
            <param name="data">The stream containing the data to validate.</param>
            <param name="contextConfig">The Xml configuration for the context loader 
            test step, this configuration is passed onto the validation step by BizUnit.</param>
            <param name="seekStream">True if the stream should be seeked to the begining.</param>
            
            <remarks>
            Context loader steps load data onto the context. The following example demonstrates how to execute a validation test step:
            
            <code escaped="true">
            XmlNode contextConfig = testConfig.SelectSingleNode("ContextConfig");
            
            ...
            
            MemoryStream response = HttpHelper.SendRequestData(destinationUrl, data, requestTimeout, context);
            context.ExecuteContextLoader( response, contextConfig );
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.Context.ExecuteContextLoader(System.IO.Stream,BizUnit.BizUnitOM.IContextLoaderStepOM)">
            <summary>
            Executes a context loader step
            </summary>
            <param name="data">The stream containing the data to validate.</param>
            <param name="contextLoaderStep">The context loader step implmenting IContextLoaderStepOM which will be executed (optional).</param>
        </member>
        <member name="M:BizUnit.Context.ExecuteContextLoader(System.IO.Stream,BizUnit.BizUnitOM.IContextLoaderStepOM,System.Boolean)">
            <summary>
            Executes a context loader step, with the option to seek the data stream to the beginning
            </summary>
            <param name="data">The stream containing the data to validate.</param>
            <param name="contextLoaderStep">The context loader step implmenting IContextLoaderStepOM which will be executed (optional).</param>
            <param name="seekStream">True if the stream should be seeked to the begining.</param>
        </member>
        <member name="M:BizUnit.Context.ReadConfigAsObject(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            Used by a test step to read an object, if the object is in the context 
            the object will be returned, otherwise the string value from the Xml configuration 
            will be returned.
            </summary>
            <param name="config">The Xml configuration for the test step.</param>
            <param name="xPath">The XPath expression used to query for the configuration value.</param>
            <param name="optional">True if this is an option field. If false and the XPath expression does not find a value and exception will be thrown.</param>
            <returns>string value</returns>
            
            <remarks>
            The following example demonstrates how to use the method:
            
            <code escaped="true">
            public void Execute(XmlNode testConfig, Context context)
            {
            	object fooObj = context.ReadConfigAsObject( testConfig, "Foo", true );
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.Context.ReadConfigAsObject(System.Xml.XmlNode,System.String)">
            <summary>
            Used by a test step to read an object, if the object is in the context 
            the object will be returned, otherwise the string value from the Xml configuration 
            will be returned.
            </summary>
            <param name="config">The Xml configuration for the test step.</param>
            <param name="xPath">The XPath expression used to query for the configuration value.</param>
            <returns>string value</returns>
            
            <remarks>
            The following example demonstrates how to use the method:
            
            <code escaped="true">
            public void Execute(XmlNode testConfig, Context context)
            {
            	object fooObj = context.ReadConfigAsObject( testConfig, "Foo" );
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.Context.ReadConfigAsXml(System.Xml.XmlNode,System.String)">
            <summary>
            Used by a test step to read a configuration string value as Xml from it's Xml configuration.
            </summary>
            <param name="config">The Xml configuration for the test step.</param>
            <param name="xPath">The XPath expression used to query for the configuration value.</param>
            <returns>string value</returns>
            
            <remarks>
            The following example demonstrates how to use the method:
            
            <code escaped="true">
            public void Execute(XmlNode testConfig, Context context)
            {
            	string directory = context.ReadConfigAsXml( testConfig, "Directory" );
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.Context.ReadConfigAsXml(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            Used by a test step to read a configuration string value as Xml from it's Xml configuration.
            </summary>
            <param name="config">The Xml configuration for the test step.</param>
            <param name="xPath">The XPath expression used to query for the configuration value.</param>
            <param name="optional">True if this is an option field. If false and the XPath expression does not find a value and exception will be thrown.</param>
            <returns>string value</returns>
            
            <remarks>
            The following example demonstrates how to use the method:
            
            <code escaped="true">
            public void Execute(XmlNode testConfig, Context context)
            {
            	string directory = context.ReadConfigAsXml( testConfig, "Directory", true );
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.Context.ReadConfigAsString(System.Xml.XmlNode,System.String)">
            <summary>
            Used by a test step to read a configuration string value from it's Xml configuration.
            </summary>
            <param name="config">The Xml configuration for the test step.</param>
            <param name="xPath">The XPath expression used to query for the configuration value.</param>
            <returns>string value</returns>
            
            <remarks>
            The following example demonstrates how to use the method:
            
            <code escaped="true">
            public void Execute(XmlNode testConfig, Context context)
            {
            	string directory = context.ReadConfigAsString( testConfig, "Directory" );
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.Context.ReadConfigAsString(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            Used by a test step to read a configuration string value from it's Xml configuration.
            </summary>
            <param name="config">The Xml configuration for the test step.</param>
            <param name="xPath">The XPath expression used to query for the configuration value.</param>
            <param name="optional">True if this is an option field. If false and the XPath expression does not find a value and exception will be thrown.</param>
            <returns>string value</returns>
            
            <remarks>
            The following example demonstrates how to use the method:
            
            <code escaped="true">
            public void Execute(XmlNode testConfig, Context context)
            {
            	string directory = context.ReadConfigAsString( testConfig, "Directory", true );
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.Context.ReadConfigAsInt32(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            Used by a test step to read a configuration Int32 value from it's Xml configuration.
            </summary>
            <param name="config">The Xml configuration for the test step.</param>
            <param name="xPath">The XPath expression used to query for the configuration value.</param>
            <param name="optional">True if this is an option field. If false and the XPath expression does not find a value and exception will be thrown.</param>
            <returns>int value</returns>
            
            <remarks>
            The following example demonstrates how to use the method:
            
            <code escaped="true">
            public void Execute(XmlNode testConfig, Context context)
            {
            	int retryCount = context.ReadConfigAsInt32( testConfig, "RetryCount" );
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.Context.ReadConfigAsInt32(System.Xml.XmlNode,System.String)">
            <summary>
            Used by a test step to read a configuration Int32 value from it's Xml configuration.
            </summary>
            <param name="config">The Xml configuration for the test step.</param>
            <param name="xPath">The XPath expression used to query for the configuration value.</param>
            <returns>int value</returns>
            
            <remarks>
            The following example demonstrates how to use the method:
            
            <code escaped="true">
            public void Execute(XmlNode testConfig, Context context)
            {
            	int retryCount = context.ReadConfigAsInt32( testConfig, "RetryCount", true );
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.Context.ReadConfigAsUInt32(System.Xml.XmlNode,System.String)">
            <summary>
            Used by a test step to read a configuration Int32 value from it's Xml configuration.
            </summary>
            <param name="config">The Xml configuration for the test step.</param>
            <param name="xPath">The XPath expression used to query for the configuration value.</param>
            <returns>uint value</returns>
            
            <remarks>
            The following example demonstrates how to use the method:
            
            <code escaped="true">
            public void Execute(XmlNode testConfig, Context context)
            {
            	uint retryCount = context.ReadConfigAsUInt32( testConfig, "RetryCount", true );
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.Context.ReadConfigAsDouble(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            Used by a test step to read a configuration double value from it's Xml configuration.
            </summary>
            <param name="config">The Xml configuration for the test step.</param>
            <param name="xPath">The XPath expression used to query for the configuration value.</param>
            <param name="optional">True if this is an option field. If false and the XPath expression does not find a value and exception will be thrown.</param>
            <returns>double value</returns>
            
            <remarks>
            The following example demonstrates how to use the method:
            
            <code escaped="true">
            public void Execute(XmlNode testConfig, Context context)
            {
            	double timeout = context.ReadConfigAsDouble( testConfig, "Timeout" );
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.Context.ReadConfigAsDouble(System.Xml.XmlNode,System.String)">
            <summary>
            Used by a test step to read a configuration double value from it's Xml configuration.
            </summary>
            <param name="config">The Xml configuration for the test step.</param>
            <param name="xPath">The XPath expression used to query for the configuration value.</param>
            <returns>double value</returns>
            
            <remarks>
            The following example demonstrates how to use the method:
            
            <code escaped="true">
            public void Execute(XmlNode testConfig, Context context)
            {
            	double timeout = context.ReadConfigAsDouble( testConfig, "Timeout", true );
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.Context.ReadConfigAsFloat(System.Xml.XmlNode,System.String)">
            <summary>
            Used by a test step to read a configuration float value from it's Xml configuration.
            </summary>
            <param name="config">The Xml configuration for the test step.</param>
            <param name="xPath">The XPath expression used to query for the configuration value.</param>
            <returns>double value</returns>
            
            <remarks>
            The following example demonstrates how to use the method:
            
            <code escaped="true">
            public void Execute(XmlNode testConfig, Context context)
            {
            	float timeout = context.ReadConfigAsFloat( testConfig, "Timeout", true );
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.Context.ReadConfigAsBool(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            Used by a test step to read a configuration bool value from it's Xml configuration.
            </summary>
            <param name="config">The Xml configuration for the test step.</param>
            <param name="xPath">The XPath expression used to query for the configuration value.</param>
            <param name="optional">True if this is an option field. If false and the XPath expression does not find a value and exception will be thrown.</param>
            <returns>bool value</returns>
            
            <remarks>
            The following example demonstrates how to use the method:
            
            <code escaped="true">
            public void Execute(XmlNode testConfig, Context context)
            {
            	bool findFirst = context.ReadConfigAsBool( testConfig, "FindFirst", true );
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.Context.ReadConfigAsBool(System.Xml.XmlNode,System.String)">
            <summary>
            Used by a test step to read a configuration bool value from it's Xml configuration.
            </summary>
            <param name="config">The Xml configuration for the test step.</param>
            <param name="xPath">The XPath expression used to query for the configuration value.</param>
            <returns>bool value</returns>
            
            <remarks>
            The following example demonstrates how to use the method:
            
            <code escaped="true">
            public void Execute(XmlNode testConfig, Context context)
            {
            	bool findFirst = context.ReadConfigAsBool( testConfig, "FindFirst", true );
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.Context.GetInnerXml(System.Xml.XmlNode)">
            <summary>
            Used by a test step to read the inner xml of an XmlNode, if the node has the 
            BizUnit attribute takeFromCtx set, the value will be fetched form the BizUnit 
            context.
            </summary>
            <param name="node">The XmlNode to fetch the inner xml from.</param>
            <returns>string</returns>
            
            <remarks>
            The following example demonstrates how to use the method:
            
            <code escaped="true">
            public void Execute(XmlNode testConfig, Context context)
            {
                XmlNodeList parameters = testConfig.SelectNodes("Parameter");
                
                ....
                
                foreach (XmlNode paramter in parameters)
                {
                   string val = context.GetInnerXml( node );
                   ...
                }
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.Context.LogException(System.Exception)">
            <summary>
            Used by a test step to log an Exception caught by the test step, this will be logged in the test output.
            </summary>
            <param name="e">The Exception to be logged by BizUnit.</param>
            
            <remarks>
            The following example demonstrates how to use the method:
            
            <code escaped="true">
            public void Execute(XmlNode testConfig, Context context)
            {
            
            	try
            	{
            		...
            	}
            	catch(Exception ex)
            	{
            		context.LogException( ex );
            	}
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.Context.LogData(System.String,System.String)">
            <summary>
            Used by a test step to log test Data, this will be logged in the test output.
            </summary>
            <param name="description">The description of what the data being logged is.</param>
            <param name="data">The data to log.</param>
            
            <remarks>
            The following example demonstrates how to use the method:
            
            <code escaped="true">
            public void Execute(XmlNode testConfig, Context context)
            {
            
            	...
            	context.LogData( "HTTP Response:", data );
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.Context.LogData(System.String,System.IO.Stream)">
            <summary>
            Used by a test step to log test Data, this will be logged in the test output.
            </summary>
            <param name="description">The description of what the data being logged is.</param>
            <param name="data">The stream containing the data to log.</param>
            
            <remarks>
            The following example demonstrates how to use the method:
            
            <code escaped="true">
            public void Execute(XmlNode testConfig, Context context)
            {
            
            	...
            	context.LogData( "HTTP Response:", data );
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.Context.LogData(System.String,System.IO.Stream,System.Boolean)">
            <summary>
            Used by a test step to log test Data, this will be logged in the test output.
            </summary>
            <param name="description">The description of what the data being logged is.</param>
            <param name="data">The stream containing the data to log.</param>
            <param name="seekStream">Seek the stream back to the beginning.</param>
            
            <remarks>
            The following example demonstrates how to use the method:
            
            <code escaped="true">
            public void Execute(XmlNode testConfig, Context context)
            {
            
            	...
            	context.LogData( "HTTP Response:", data );
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.Context.LogXmlData(System.String,System.String)">
            <summary>
            Used by a test step to log Xml test Data, this will be logged in the test output.
            </summary>
            <param name="description">The description of what the data being logged is.</param>
            <param name="data">The data to log.</param>
            
            <remarks>
            The following example demonstrates how to use the method:
            
            <code escaped="true">
            public void Execute(XmlNode testConfig, Context context)
            {
            
            	...
            	context.LogXmlData( "HTTP Response:", data );
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.Context.LogXmlData(System.String,System.IO.Stream)">
            <summary>
            Used by a test step to log Xml test Data, this will be logged in the test output.
            </summary>
            <param name="description">The description of what the data being logged is.</param>
            <param name="data">The stream containing the data to log.</param>
            
            <remarks>
            The following example demonstrates how to use the method:
            
            <code escaped="true">
            public void Execute(XmlNode testConfig, Context context)
            {
            
            	...
            	context.LogXmlData( "HTTP Response:", data );
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.Context.LogXmlData(System.String,System.IO.Stream,System.Boolean)">
            <summary>
            Used by a test step to log Xml test Data, this will be logged in the test output.
            </summary>
            <param name="description">The description of what the data being logged is.</param>
            <param name="data">The stream containing the data to log.</param>
            <param name="seekStream">Seek the stream back to the beginning.</param>
            
            <remarks>
            The following example demonstrates how to use the method:
            
            <code escaped="true">
            public void Execute(XmlNode testConfig, Context context)
            {
            
            	...
            	context.LogData( "HTTP Response:", data );
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.Context.LogInfo(System.String)">
            <summary>
            Used by a test step to log test information, this will be logged in the test output.
            </summary>
            <param name="text">The text to be written to the output.</param>
            
            <remarks>
            The following example demonstrates how to use the method:
            
            <code escaped="true">
            public void Execute(XmlNode testConfig, Context context)
            {
            
            	...
            	context.LogInfo( "HTTP Response was successfully received" );
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.Context.LogInfo(System.String,System.Object[])">
            <summary>
            Used by a test step to log test information, this will be logged in the test output.
            </summary>
            <param name="text">The text to be written to the output.</param>
            <param name="args">Array of arguments to be formatted with the text.</param>
            
            <remarks> 
            The following example demonstrates how to use the method:
            
            <code escaped="true">
            public void Execute(XmlNode testConfig, Context context)
            {
            
            	...
            	context.LogInfo( "HTTP Response was successfully received by: {0}, at: {1}", clientName, DateTime.Now );
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.Context.LogWarning(System.String)">
            <summary>
            Used by a test step to log a test warnings, this will be logged in the test output.
            </summary>
            <param name="text">The text to be written to the output.</param>
            
            <remarks> 
            The following example demonstrates how to use the method:
            
            <code escaped="true">
            public void Execute(XmlNode testConfig, Context context)
            {
            
            	...
            	context.LogWarning( "The FILE was found, retrying..." );
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.Context.LogWarning(System.String,System.Object[])">
            <summary>
            Used by a test step to log a test warnings, this will be logged in the test output.
            </summary>
            <param name="text">The text to be written to the output.</param>
            <param name="args">Array of arguments to be formatted with the text.</param>
            
            <remarks> 
            The following example demonstrates how to use the method:
            
            <code escaped="true">
            public void Execute(XmlNode testConfig, Context context)
            {
            
            	...
            	context.LogWarning( "The FILE was found, poll nummber: {0}, number of retries remaining: {1}", count, retriesLeft );
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.Context.LogError(System.String)">
            <summary>
            Used by a test step to log a test error, this will be logged in the test output.
            </summary>
            <param name="text">The text to be written to the output.</param>
            
            <remarks> 
            The following example demonstrates how to use the method:
            
            <code escaped="true">
            public void Execute(XmlNode testConfig, Context context)
            {
            
            	...
            	context.Log(LogLevel.ERROR,  "The response data was invalid." );
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.Context.LogError(System.String,System.Object[])">
            <summary>
            Used by a test step to log a test error, this will be logged in the test output.
            </summary>
            <param name="text">The text to be written to the output.</param>
            <param name="args">Array of arguments to be formatted with the text.</param>
            
            <remarks> 
            The following example demonstrates how to use the method:
            
            <code escaped="true">
            public void Execute(XmlNode testConfig, Context context)
            {
            
            	...
            	context.Log(LogLevel.ERROR,  "The request failed with the folowing error: {0}", requestErrorText );
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.Context.SubstituteWildCards(System.String)">
            <summary>
            Used to substitute wild cards into strings.
            </summary>
            
            <remarks> 
            The following wild cards are suported:
            
            <code escaped="true">
            %DateTime% - will replace the wild card with the current date time in the format HHmmss-ddMMyyyy
            %ServerName% - will replace the wild card with the name of the server BizUnit is being executed on
            %Guid% - will be replaced by a new Guid
            </code>
            
            </remarks>
        </member>
        <member name="P:BizUnit.Context.DisposeMembersOnTestCaseCompletion">
            <summary>
            Sets a value indicating whether members, which implement <see cref="!:IDispoable"/>, are disposed on test case completion.
            </summary>
            <value>
            	<c>true</c> if members should be disposed; otherwise, <c>false</c> (default).
            </value>
        </member>
        <member name="P:BizUnit.Context.TestCaseStart">
            <summary>
            Used by a test step to get the time that the test case started.
            </summary>
            
            <remarks> 
            The following example demonstrates how to use the method:
            
            <code escaped="true">
            public void Execute(XmlNode testConfig, Context context)
            {
            
            	...
            	DateTime testStart = context.TestCaseStart;
            </code>
            
            </remarks>
        </member>
        <member name="T:BizUnit.BizUnitOM.ContextLoaderStepBuilder">
            <summary>
            The ContextLoaderStepBuilder abstracts a validation sub step, it is responsible for 
            creating and configuring a validation sub step that implements IContextLoaderStepOM.
            </summary>
        </member>
        <member name="T:BizUnit.BizUnitOM.TestStepBuilderBase">
            <summary>
            The TestStepBuilderBase is the base class for TestStepBuilder, 
            ContextLoaderStepBuilder and ValidationStepBuilder. It should 
            not be used directly. TestStepBuilderBase handles the generic 
            setting of step properties.
            </summary>
        </member>
        <member name="M:BizUnit.BizUnitOM.TestStepBuilderBase.#ctor(System.Xml.XmlNode)">
            <summary>
            TestStepBuilderBase constructor.
            </summary>
            
            <param name='config'>The Xml configuration for a test step that 
            implements the ITestStep interface.</param>
        </member>
        <member name="M:BizUnit.BizUnitOM.TestStepBuilderBase.#ctor(System.String)">
            <summary>
            TestStepBuilderBase constructor.
            </summary>
            
            <param name='typeName'>The type name of the test step to be created by the builder.</param>
        </member>
        <member name="M:BizUnit.BizUnitOM.TestStepBuilderBase.#ctor(System.String,System.String)">
            <summary>
            TestStepBuilderBase constructor.
            </summary>
            
            <param name='typeName'>The type name of the test step to be created by the builder.</param>
            <param name='assemblyPath'>The assembly path name of the test step to be created by the builder.</param>
        </member>
        <member name="M:BizUnit.BizUnitOM.TestStepBuilderBase.SetProperty(System.String,System.Object[])">
            <summary>
            SetProperty is used to set a property on a test step.
            </summary>
            
            <param name='name'>The name of the property to set on the test step or test sub-step.</param>
            <param name='args'>An object array that will be formatted to the correct type of the property which is being set.</param>
        </member>
        <member name="M:BizUnit.BizUnitOM.TestStepBuilderBase.SetConfigXml(System.String)">
            <summary>
            SetConfigXml is used to set the Xml configuration for a test step which will 
            be used during the execution of a test step.
            </summary>
            
            <param name='xmlConfig'>The Xml configuration for the test step.</param>
        </member>
        <member name="M:BizUnit.BizUnitOM.TestStepBuilderBase.GetPropertyInfo(System.String)">
            <summary>
            GetPropertyInfo returns the <see cref="T:System.Reflection.PropertyInfo"/> of the property specified by name.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <returns>PropertyInfo for the property with the name specified.</returns>
        </member>
        <member name="P:BizUnit.BizUnitOM.TestStepBuilderBase.RawTestStep">
            <summary>
            RawTestStep returns the test step, which could be either a config driven step or an OM driven step.
            </summary>
        </member>
        <member name="M:BizUnit.BizUnitOM.ContextLoaderStepBuilder.#ctor(System.Xml.XmlNode)">
            <summary>
            ContextLoaderStepBuilder constructor.
            </summary>
            
            <param name='config'>The Xml configuration for a context loader sub step that 
            implements the ITestStep interface.</param>
        </member>
        <member name="M:BizUnit.BizUnitOM.ContextLoaderStepBuilder.#ctor(System.String,System.String)">
            <summary>
            ContextLoaderStepBuilder constructor.
            </summary>
            
            <param name='typeName'>The type name of the test step to be created by the builder.</param>
            <param name='assemblyPath'>The assembly path name of the context loader sub step to 
            be created by the builder.</param>
        </member>
        <member name="T:BizUnit.IContextLoaderStep">
             <summary>
             The IContextLoaderStep interface is implemented by test steps which need to load data into the context.
             </summary>
             
             <remarks>
             The following example demonstrates how to create and call BizUnit:
             
             <code escaped="true">
            	public class XmlContextLoader : IContextLoaderStep
            	{
            		public void ExecuteContextLoader(Stream data, XmlNode contextConfig, Context context)
            		{
            			XmlNodeList contextNodes = contextConfig.SelectNodes("XPath");
            
            			StreamReader sr = new StreamReader( data );
            			string strData = sr.ReadToEnd();
            
            			XmlDocument doc = new XmlDocument();
            			doc.Load( data );
            
            			foreach (XmlNode contextNode in contextNodes)
            			{
            				string contextKey = contextNode.SelectSingleNode("@contextKey").Value;
            				string xpathExp = contextNode.SelectSingleNode(".").InnerText;
            
            				context.LogInfo("XmlContextLoader loading key:{0} with value:\"{1}\"", contextKey, xpathExp );
            
            				XmlNode node = doc.SelectSingleNode( xpathExp );
            
            				context.Add( contextKey, node.InnerText );
            			}
            		}
            	}
            	</code>
            	
            	</remarks>
        </member>
        <member name="M:BizUnit.IContextLoaderStep.ExecuteContextLoader(System.IO.Stream,System.Xml.XmlNode,BizUnit.Context)">
            <summary>
            ExecuteContextLoader is called by the BizUnit framework to execute the context loader test step.
            </summary>
            <param name="data">The data which the values are read from.</param>
            <param name="contextConfig">The configuration for the context loader test step.</param>
            <param name="context">The context object into which the values will be written.</param>
        </member>
        <member name="T:BizUnit.BizUnitOM.IContextLoaderStepOM">
             <summary>
             The IContextLoaderStepOM interface is implemented by test steps which 
             need to load data into the context and wish to be driven through the 
             BizUnit object model.
             </summary>
             
             <remarks>
             The following example demonstrates how to create and call BizUnit:
             
             <code escaped="true">
            	public class XmlContextLoader : IContextLoaderStepOM
            	{
                private IList&gt;Pair&lt; xPathExpressions = new List&gt;Pair&lt;();
            
                public IList&gt;Pair&lt; XPathExpressions
                {
                    set { this.xPathExpressions = value; }
                }
            
             	public void ExecuteContextLoader(Stream data, XmlNode contextConfig, Context context)
               	{
            		   XmlNodeList contextNodes = contextConfig.SelectNodes("XPath");
            
            		   foreach (XmlNode contextNode in contextNodes)
            		   {
                       Pair xPathPair = new Pair(contextNode.SelectSingleNode("@contextKey").Value, contextNode.SelectSingleNode(".").InnerText);
            		      this.xPathExpressions.Add(xPathPair);
            		   }
            
                    ExecuteContextLoader(data, context);
            	    }
             
            		public void ExecuteContextLoader(Stream data, Context context)
            		{
                     XmlDocument doc = new XmlDocument();
                     doc.Load(data);
            
                    foreach (Pair xPathExpression in this.xPathExpressions)
                    {
                        string contextKey = (string)xPathExpression.First;
                        string xpathExp = (string)xPathExpression.Second;
                        string val;
            
                        context.LogInfo("XmlContextLoader loading key:{0} with value:\"{1}\"", contextKey, xpathExp);
            
                        try
                        {
                            val = doc.SelectSingleNode(xpathExp).InnerText;
                        }
                        catch (Exception ex)
                        {
                            context.LogError("The XPath expression: {0}, could not be evaluated", xpathExp);
                            context.LogException(ex);
                            throw;
                        }
            
                        context.Add(contextKey, val);
                    }
            		}
             
             	public void Validate()
                 {
                    // No validation for this.xPathExpressions
                 }
            	}
            	</code>
            	
            	</remarks>
        </member>
        <member name="M:BizUnit.BizUnitOM.IContextLoaderStepOM.ExecuteContextLoader(System.IO.Stream,BizUnit.Context)">
            <summary>
            ExecuteContextLoader is called by the BizUnit framework to execute the context loader test step.
            </summary>
            <param name="data">The data which the values are read from.</param>
            <param name="context">The context object into which the values will be written.</param>
        </member>
        <member name="M:BizUnit.BizUnitOM.IContextLoaderStepOM.Validate(BizUnit.Context)">
            <summary>
            Called by the BizUnit framework to validate that the context loader step has been correctly configured
            </summary>
        </member>
        <member name="T:BizUnit.LogLevel">
            <summary>
            The LogLevel enum defines the level of logging. 
            </summary>
        </member>
        <member name="T:BizUnit.ILogger">
            <summary>
            The ILogger interface is implemented by custom loggers. This enables the BizUnit log output 
            to directed to custom syncs.
            </summary>
        </member>
        <member name="M:BizUnit.ILogger.TestGroupStart(System.String,TestGroupPhase,System.DateTime,System.String)">
            <summary>
            TestGroupStart is called by the BizUnit framework if/when a Test Group is started. 
            Note, test groups are optional.
            </summary>
            
            <param name='testGroupName'>The name of the test group.</param>
            <param name='testGroupPhase'>The phase of the test group, e.g. setup or tear down</param>
            <param name='time'>The date time that this was invoked</param>
            <param name='userName'>The user name that BizUnit is running under</param>
        </member>
        <member name="M:BizUnit.ILogger.TestGroupEnd(TestGroupPhase,System.DateTime,System.Exception)">
            <summary>
            TestGroupEnd is called by the BizUnit framework if/when a Test Group phase ends. 
            Note, test groups are optional.
            </summary>
            
            <param name='testGroupPhase'>The phase of the test group, e.g. setup or tear down</param>
            <param name='time'>The date time that this was invoked</param>
            <param name='executionException'>Will be null unless the phase exected with an error</param>
        </member>
        <member name="M:BizUnit.ILogger.TestStart(System.String,System.DateTime,System.String)">
            <summary>
            TestStart is called by the BizUnit framework at the start of a new test. 
            </summary>
            
            <param name='testName'>The name of the test group.</param>
            <param name='time'>The date time that this was invoked</param>
            <param name='userName'>The user name that BizUnit is running under</param>
        </member>
        <member name="M:BizUnit.ILogger.TestEnd(System.String,System.DateTime,System.Exception)">
            <summary>
            TestEnd is called by the BizUnit framework at the end of a new test. 
            </summary>
            
            <param name='testName'>The name of the test group.</param>
            <param name='time'>The date time that this was invoked</param>
            <param name='ex'>Will be null unless the test exected with an error</param>
        </member>
        <member name="M:BizUnit.ILogger.TestStageStart(TestStage,System.DateTime)">
            <summary>
            TestStageStart is called by the BizUnit framework at the start of a test stage. 
            </summary>
            
            <param name='stage'>The stage type, for example setup, execution or clenaup.</param>
            <param name='time'>The date time that this was invoked</param>
        </member>
        <member name="M:BizUnit.ILogger.TestStageEnd(TestStage,System.DateTime,System.Exception)">
            <summary>
            TestStageEnd is called by the BizUnit framework at the end of a given test stage. 
            </summary>
            
            <param name='stage'>The stage type, for example setup, execution or clenaup.</param>
            <param name='time'>The date time that this was invoked</param>
            <param name='stageException'>Will be null unless the test stage exected with an error</param>
        </member>
        <member name="M:BizUnit.ILogger.TestStepStart(System.String,System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            TestStepStart is called by the BizUnit framework at the start of a test step. 
            </summary>
            
            <param name='testStepName'>The name of the test step being executed.</param>
            <param name='time'>The date time that this was invoked</param>
            <param name='runConcurrently'>Indicates whether the step is being executed in parallel to other steps</param>
            <param name='failOnError'>Indicates whether the step is configured to fail if an error occurs</param>
        </member>
        <member name="M:BizUnit.ILogger.TestStepEnd(System.String,System.DateTime,System.Exception)">
            <summary>
            TestStepEnd is called by the BizUnit framework at the end of a test step. 
            </summary>
            
            <param name='testStepName'>The name of the test step being executed.</param>
            <param name='time'>The date time that this was invoked</param>
            <param name='ex'>The exception that was thrown by the step</param>
        </member>
        <member name="M:BizUnit.ILogger.ValidatorStart(System.String,System.DateTime)">
            <summary>
            ValidatorStart is called by the BizUnit framework at the start of a validator sub step. 
            </summary>
            
            <param name='validatorName'>The name of the validator sub step.</param>
            <param name='time'>The date time that this was invoked</param>
        </member>
        <member name="M:BizUnit.ILogger.ValidatorEnd(System.String,System.DateTime,System.Exception)">
            <summary>
            ValidatorEnd is called by the BizUnit framework at the end of a validator sub step. 
            </summary>
            
            <param name='validatorName'>The name of the validator sub step.</param>
            <param name='time'>The date time that this was invoked</param>
            <param name='ex'>The exception that was thrown by the sub step</param>
        </member>
        <member name="M:BizUnit.ILogger.ContextLoaderStart(System.String,System.DateTime)">
            <summary>
            ContextLoaderStart is called by the BizUnit framework at the start of a context loader sub step. 
            </summary>
            
            <param name='validatorName'>The name of the validator sub step.</param>
            <param name='time'>The date time that this was invoked</param>
        </member>
        <member name="M:BizUnit.ILogger.ContextLoaderEnd(System.String,System.DateTime,System.Exception)">
            <summary>
            ContextLoaderEnd is called by the BizUnit framework at the end of a context loader sub step. 
            </summary>
            
            <param name='validatorName'>The name of the validator sub step.</param>
            <param name='time'>The date time that this was invoked</param>
            <param name='ex'>The exception that was thrown by the sub step</param>
        </member>
        <member name="M:BizUnit.ILogger.Log(BizUnit.LogLevel,System.String)">
            <summary>
            Log is called by the BizUnit framework, by test steps or by sub steps in order to log information, warnings or errors. 
            </summary>
            
            <param name='logLevel'>The level to log at.</param>
            <param name='text'>The text to log</param>
        </member>
        <member name="M:BizUnit.ILogger.Log(BizUnit.LogLevel,System.String,System.Object[])">
            <summary>
            Log is called by the BizUnit framework, by test steps or by sub steps in order to log information, warnings or errors. 
            </summary>
            
            <param name='logLevel'>The level to log at.</param>
            <param name='text'>The text to log</param>
            <param name='args'>Arguments to format into the text string</param>
        </member>
        <member name="M:BizUnit.ILogger.LogException(System.Exception)">
            <summary>
            LogException is called by the BizUnit framework, by test steps or by sub steps in order to log exceptions. 
            </summary>
            
            <param name='e'>The exception to log.</param>
        </member>
        <member name="M:BizUnit.ILogger.LogData(System.String,System.String)">
            <summary>
            LogData is called by test steps or by sub steps in order to log data. 
            </summary>
            
            <param name='description'>The description of the data being logged.</param>
            <param name='data'>The data to log</param>
        </member>
        <member name="M:BizUnit.ILogger.LogXmlData(System.String,System.String)">
            <summary>
            LogData is called by test steps or by sub steps in order to log Xml data. 
            </summary>
            
            <param name='description'>The description of the data being logged.</param>
            <param name='data'>The data to log</param>
        </member>
        <member name="M:BizUnit.ILogger.LogBufferedText(BizUnit.ILogger)">
            <summary>
            LogBufferedText is called to log text that has been buffered whilst a test step is executed conrurrently. 
            Test steps that are executing concurrently will have their own instance of a _logger and will have 
            this property set to true.
            </summary>
            
            <param name='bufferedLogger'>The instance of the ILogger holding the buffered log data.</param>
        </member>
        <member name="M:BizUnit.ILogger.Flush">
            <summary>
            Flush is used to flush the log data to the underlying storage, for eaxmple if the underlying 
            storage is a stream, the stream would be flushed during the invokation of this method. 
            </summary>
        </member>
        <member name="M:BizUnit.ILogger.Close">
            <summary>
            Close is called once the _logger is no longer used. 
            </summary>
        </member>
        <member name="P:BizUnit.ILogger.ConcurrentExecutionMode">
            <summary>
            Gets or set the concurrency mode, test steps that are executing concurrently will have 
            their own instance of a _logger and will have this property set to true.
            </summary>
        </member>
        <member name="P:BizUnit.ILogger.BufferedText">
            <summary>
            Returns the log data that has been buffered whilst a test step has been executed concurrently. 
            Test steps that are executing concurrently will have their own instance of a _logger and will have 
            this property set to true.
            </summary>
        </member>
        <member name="T:BizUnit.ITestStep">
             <summary>
             The ITestStep interface is implemented by test steps.
             </summary>
             
             <remarks>
             The following example demonstrates how to implement the ITestStep interface:
             
             <code escaped="true">
            	public class DelayStep : ITestStep
            	{
            		public void Execute(XmlNode testConfig, Context context)
            		{
            			int timeOut = context.ReadConfigAsInt32( testConfig, "Delay" );
            
            			context.LogInfo("About to wait for {0} milli seconds...", timeOut.ToString());
            
            			Thread.Sleep(timeOut);
            
            			context.LogInfo("A delay of {0} milliseconds has successfully completed.", timeOut.ToString());
            		}
            	}
            	</code>
            	
            	</remarks>
        </member>
        <member name="M:BizUnit.ITestStep.Execute(System.Xml.XmlNode,BizUnit.Context)">
            <summary>
            Called by the BizUnit framework to execute the test step
            </summary>
            
            <param name='testConfig'>The Xml fragment containing the configuration for the test step</param>
            <param name='context'>The context for the test, this holds state that is passed beteen tests</param>
        </member>
        <member name="T:BizUnit.BizUnitOM.ITestStepOM">
             <summary>
             The ITestStepOM interface is implemented by test steps which wish
             to be driven via the BizUnit object model.
             </summary>
             
             <remarks>
             The following example demonstrates how to implement the ITestStepOM interface:
             
             <code escaped="true">
            	public class DelayStep : ITestStepOM
            	{
                private int timeOut;
            
                public int TimeOut
                {
                    set { this.timeOut = value; }
                }
            
             	public void Execute(XmlNode testConfig, Context context)
            		{
            		   this.timeOut = context.ReadConfigAsInt32( testConfig, "Delay" );
            
                    Execute(context);
            	    }
            
            		public void Execute(XmlNode testConfig, Context context)
            		{
                    context.LogInfo("About to wait for {0} milli seconds...", timeOut.ToString());
            
                    Thread.Sleep(this.timeOut);
            
                    context.LogInfo("A delay of {0} milli second has successfully completed.", timeOut.ToString());
            		}
             
                 public void Validate()
                 {
                    // this.timeOut - no validation required
                 }
            
            	}
            	</code>
            	
            	</remarks>
        </member>
        <member name="M:BizUnit.BizUnitOM.ITestStepOM.Execute(BizUnit.Context)">
            <summary>
            Called by the BizUnit framework to execute the test step
            </summary>
            
            <param name='context'>The context for the test, this holds state that is passed beteen tests</param>
        </member>
        <member name="M:BizUnit.BizUnitOM.ITestStepOM.Validate(BizUnit.Context)">
            <summary>
            Called by the BizUnit framework to validate that the test step has been correctly configured
            </summary>
        </member>
        <member name="T:BizUnit.IValidationStep">
             <summary>
             The IValidationStep interface is implemented by validation sub-steps that perform validation against data.
             </summary>
             
             <remarks>
             The following example demonstrates how to create and call BizUnit:
             
             <code escaped="true">
            	public class BinaryValidation : IValidationStep
            	{
            		public void ExecuteValidation(Stream data, XmlNode validatorConfig, Context context)
            		{
            			MemoryStream dataToValidateAgainst = null;
            
            			string comparisonDataPath = context.ReadConfigAsString( validatorConfig, "ComparisonDataPath" );
            
            			try
            			{
            				try
            				{
            					dataToValidateAgainst = StreamHelper.LoadFileToStream(comparisonDataPath);
            				}
            				catch(Exception e)
            				{
            					context.LogError( "BinaryValidation failed, exception caugh trying to open comparison file: {0}", comparisonDataPath  );
            					throw;
            				}
            
            				try
            				{
            					StreamHelper.CompareStreams( data, dataToValidateAgainst );
            				}
            				catch(Exception e)
            				{
            					context.LogError( "Binary validation failed while comparing the two data streams with the following exception: {0}", e.ToString() );
            					throw;
            				}
            			}
            			finally
            			{
            				if ( null != dataToValidateAgainst )
            				{
            					dataToValidateAgainst.Close();
            				}
            			}
            		}
            	}
            	</code>
            	
            	</remarks>
        </member>
        <member name="M:BizUnit.IValidationStep.ExecuteValidation(System.IO.Stream,System.Xml.XmlNode,BizUnit.Context)">
            <summary>
            Called by the BizUnit framework to execute the validation test step
            </summary>
            
            <param name='data'>The stream cintaining the data to be validated.</param>
            <param name='validatorConfig'>The Xml fragment containing the configuration for the test step</param>
            <param name='context'>The context for the test, this holds state that is passed beteen tests</param>
        </member>
        <member name="T:BizUnit.BizUnitOM.IValidationStepOM">
            <summary>
            The IValidationStepOM interface is implemented by validation sub-steps 
            that perform validation against data. This interface should be implemented 
            by validation steps which wish to be driven by the BizUnit object 
            model.
            </summary>
            
            <remarks>
            The following example demonstrates how to implement the IValidationStepOM interface:
            
            <code escaped="true">
            public class RegExValidationStep : IValidationStepOM
            {
                private IList&gt;string&lt; validationRegExs = new List&gt;string&lt;();
            
                public IList&gt;string&lt; ValidationRegEx
                {
                    set { this.validationRegExs = value; }
                }
            
                public void ExecuteValidation(Stream data, XmlNode validatorConfig, Context context)
                {
                    XmlNodeList validationNodes = validatorConfig.SelectNodes("ValidationRegEx");
            
                    foreach (XmlNode validationNode in validationNodes)
                    {
                        this.validationRegExs.Add(validationNode.InnerText);
                    }
            
                    ExecuteValidation(data, context);
                }
            
                public void ExecuteValidation(Stream data, Context context)
                {
                    StreamReader sr = new StreamReader(data);
                    string strData = sr.ReadToEnd();
            
                    foreach (string validationRegEx in this.validationRegExs)
                    {
                        Match match = Regex.Match(strData, validationRegEx);
            
                        if (match.Success)
                        {
                            context.LogInfo("Regex validation succeeded for pattern \"{0}\".", validationRegEx);
                        }
                        else { throw new Exception(String.Format("Regex validation failed for pattern \"{0}\".", validationRegEx)); }
                    }
                }
            
                public void Validate()
                {
                    // validationRegEx - no validation to do
                }
            }
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.BizUnitOM.IValidationStepOM.ExecuteValidation(System.IO.Stream,BizUnit.Context)">
            <summary>
            Called by the BizUnit framework to execute the validation test step
            </summary>
            
            <param name='data'>The stream cintaining the data to be validated.</param>
            <param name='context'>The context for the test, this holds state that is passed beteen tests</param>
        </member>
        <member name="M:BizUnit.BizUnitOM.IValidationStepOM.Validate(BizUnit.Context)">
            <summary>
            Called by the BizUnit framework to validate that the validation step has been correctly configured
            </summary>
        </member>
        <member name="T:BizUnit.Logger">
            <summary>
            The BizUnit Logger is used to log data from BizUnit and test steps.
            </summary>
        </member>
        <member name="T:TestGroupPhase">
            <summary>The TestGroupPhase enumeration is used to specify the setup and teardown phases of a group of test cases. For example when using the NUnit attributes: [TestFixtureSetUp] or [TestFixtureTearDown].
            </summary>
        </member>
        <member name="F:TestGroupPhase.TestGroupSetup">
            <summary>The start of the test group setup</summary>
        </member>
        <member name="F:TestGroupPhase.TestGroupTearDown">
            <summary>The end of the test group setup</summary>
        </member>
        <member name="F:TestGroupPhase.Unknown">
            <summary>Undefined</summary>
        </member>
        <member name="T:TestStage">
            <summary>The TestStage enumeration is used to specify the stage of a BizUnit 
            test case, each instance of a test step must be assigned to a single stage.
            </summary>
        </member>
        <member name="F:TestStage.Setup">
            <summary>The setup stage of a test, typically used for initialising the 
             conditions ready to run the test</summary>
        </member>
        <member name="F:TestStage.Execution">
            <summary>The execution stage of a test. typically this stage of the test 
             represents the actual scenario being tested</summary>
        </member>
        <member name="F:TestStage.Cleanup">
            <summary>The cleanup stage is always executed, typically this stage should 
             contain the neccessary steps to revert the platform to its state prior 
             to the test runnning</summary>
        </member>
        <member name="T:BizUnit.BizUnitOM.TestStepBuilder">
            <summary>
            The TestStepBuilder abstracts a test step, it is responsible for 
            creating and configuring a test step that implements ITestStepOM.
            </summary>
            
            <remarks>
            The following example demonstrates how to use the TestStepBuilder:
            
            <code escaped="true">
            // Create the TestStepBuilder
            TestStepBuilder tsb = new TestStepBuilder("BizUnit.FileCreateStep");
            
            // Set the properties on the test step...
            object[] args = new object[1];
            args[0] = @"..\..\..\Test\BizUnit.Tests\Data\LoadGenScript001.xml";
            tsb.SetProperty("SourcePath", args);
            
            args = new object[1];
            args[0] = @"..\..\..\Test\BizUnit.Tests\Out\Data_%Guid%.xml";
            tsb.SetProperty("CreationPath", args);
            
            // Create the BizUnitTestCase
            BizUnitTestCase testCase = new BizUnitTestCase();
            
            // Add the test step builder to the BizUnitTestCase...
            testCase.AddTestStep(tsb, TestStage.Execution);
            
            // Create and execute an instance of BizUnit...
            BizUnit bizUnit = new BizUnit(testCase);
            bizUnit.RunTest();
            </code>
            
            </remarks>
        </member>
        <member name="M:BizUnit.BizUnitOM.TestStepBuilder.#ctor(BizUnit.BizUnitOM.ITestStepOM)">
            <summary>
            TestStepBuilder constructor.
            </summary>
            
            <param name='testStep'>A test step that has already been created and 
            that implements ITestStepOM.</param>
        </member>
        <member name="M:BizUnit.BizUnitOM.TestStepBuilder.#ctor(System.String)">
            <summary>
            TestStepBuilder constructor.
            </summary>
            
            <param name='typeName'>The type name of the test step that will be 
            created by the TestStepBuilder, the step should implement ITestStepOM.</param>
        </member>
        <member name="M:BizUnit.BizUnitOM.TestStepBuilder.#ctor(System.String,System.String)">
            <summary>
            TestStepBuilder constructor.
            </summary>
            
            <param name='typeName'>The type name of the test step that will be 
            created by the TestStepBuilder, the step should implement ITestStepOM.</param>
            <param name='assemblyPath'>The assembly path of the test step that will be 
            created by the TestStepBuilder, the step should implement ITestStepOM.</param>
        </member>
        <member name="P:BizUnit.BizUnitOM.TestStepBuilder.ValidationStepBuilder">
            <summary>
            Set the ValidationStepBuilder property.
            </summary>
            
            <value>The Validation sub-step builder that will be executed during the 
            execution of the test step.</value>
        </member>
        <member name="P:BizUnit.BizUnitOM.TestStepBuilder.ContextLoaderStepBuilder">
            <summary>
            Set the ContextLoaderStepBuilder property.
            </summary>
            
            <value>The Context Loader sub-step builder that will be executed during the 
            execution of the test step.</value>
        </member>
        <member name="T:BizUnit.TestStepExecutionException">
            <summary>
            TestStepExecutionException is thrown by BizUnit to indicate a validation step failed.
            </summary>
            <remarks>The ValidationStepExecutionException is thrown by BizUnit when a validation step fails, the 
            framework automatically wraps the exception thrown by the validaiton step with an 
            TestStepExecutionException</remarks>
        </member>
        <member name="M:BizUnit.TestStepExecutionException.#ctor(System.String,TestStage,System.String,System.String)">
            <summary>
            TestStepExecutionException constructor.
            </summary>
            <param name="message">The message associated with this exception.</param>
            <param name="testCaseName">The name of the BizUnit test case executing whilst the validation step failed.</param>
            
            <remarks>
            The following example demonstrates how to create and call BizUnit using 
            the BizUnit Test Case Object Model:
            </remarks>
        </member>
        <member name="M:BizUnit.TestStepExecutionException.#ctor(System.String,System.Exception,TestStage,System.String,System.String)">
            <summary>
            TestStepExecutionException constructor.
            </summary>
            <param name="message">The message associated with this exception.</param>
            <param name="testCaseName">The name of the BizUnit test case executing whilst the validation step failed.</param>
            
            <remarks>
            The following example demonstrates how to create and call BizUnit using 
            the BizUnit Test Case Object Model:
            </remarks>
        </member>
        <member name="P:BizUnit.TestStepExecutionException.TestCaseName">
            <summary>
            The name of the test case
            </summary>
        </member>
        <member name="P:BizUnit.TestStepExecutionException.TestStepName">
            <summary>
            The name of the test step
            </summary>
        </member>
        <member name="P:BizUnit.TestStepExecutionException.Stage">
            <summary>
            The test stage being executed
            </summary>
        </member>
        <member name="T:BizUnit.BizUnitOM.ValidationStepBuilder">
            <summary>
            The ValidationStepBuilder abstracts a validation sub step, it is responsible for 
            creating and configuring a validation sub step that implements IValidationStepOM.
            </summary>
        </member>
        <member name="M:BizUnit.BizUnitOM.ValidationStepBuilder.#ctor(System.Xml.XmlNode)">
            <summary>
            ValidationStepBuilder constructor.
            </summary>
            
            <param name='config'>The Xml configuration for a test step that 
            implements the ITestStep interface.</param>
        </member>
        <member name="M:BizUnit.BizUnitOM.ValidationStepBuilder.#ctor(System.String,System.String)">
            <summary>
            ValidationStepBuilder constructor.
            </summary>
            
            <param name='typeName'>The type name of the test step to be created by the builder.</param>
            <param name='assemblyPath'>The assembly path name of the test step to be created by the builder.</param>
        </member>
        <member name="T:BizUnit.ValidationStepExecutionException">
            <summary>
            ValidationStepExecutionException is thrown by BizUnit to indicate a validation step failed.
            </summary>
            <remarks>The ValidationStepExecutionException is thrown by BizUnit when a validation step fails, the 
            framework automatically wraps the exception thrown by the validaiton step with an 
            ValidationStepExecutionException</remarks>
        </member>
        <member name="M:BizUnit.ValidationStepExecutionException.#ctor(System.String,System.String)">
            <summary>
            ValidationStepExecutionException constructor.
            </summary>
            <param name="message">The message associated with this exception.</param>
            <param name="testCaseName">The name of the BizUnit test case executing whilst the validation step failed.</param>
            
            <remarks>
            The following example demonstrates how to create and call BizUnit using 
            the BizUnit Test Case Object Model:
            </remarks>
        </member>
        <member name="M:BizUnit.ValidationStepExecutionException.#ctor(System.String,System.Exception,System.String)">
            <summary>
            ValidationStepExecutionException constructor.
            </summary>
            <param name="message">The message associated with this exception.</param>
            <param name="innerException">The exception thrown by the validation step.</param>
            <param name="testCaseName">The name of the BizUnit test case executing whilst the validation step failed.</param>
            
            <remarks>
            The following example demonstrates how to create and call BizUnit using 
            the BizUnit Test Case Object Model:
            </remarks>
        </member>
        <member name="P:BizUnit.ValidationStepExecutionException.TestCaseName">
            <summary>
            The name of the test case
            </summary>
        </member>
    </members>
</doc>
